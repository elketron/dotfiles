global !p:
Vars = {'sb': 'sbyte', 'b': 'byte', 'sh': 'short', 'ush': 'ushort', 'i': 'int','ui': 'uint', 'ul': 'ulong','c': 'char','f':'float', 'd': 'double', 'dec': 'decimal', 'bo': 'bool', 's': 'string','v': 'void'}

choice = {'r': '', 's':'static'}

endglobal

snippet cout "console write"
std::cout << $1 << std::endl;
endsnippet 

snippet cin "console input"
cin >> ${1:var};
endsnippet

snippet incl "include"
#include <${1:lib}>
endsnippet 

snippet main "main function"
int main (int argc, char *argv[]){
	${1:/* code */}

	return 0;
}
endsnippet 

snippet while "while loop"
while (${1:condition}){
	${2:/* code */}
}
endsnippet 

snippet for "for loop"
for (int $1 = $2; $1 $3; $1++){
	${4:/* code */}
}
endsnippet 

snippet rfor "ranged for"
for (${1:var} ${2:Val} : ${3:collection}){
	${0:VISUAL}
}
endsnippet 

snippet dow "do while loop"
do{
	${2: /* code */}
} while (${1:condition})
endsnippet 

snippet if "if statement"
if (${1:condition}){
	${2:/* code */}
}
endsnippet 

snippet elif "else if"
else if (${1:condition}){
	${2:/* code */}
}
endsnippet

snippet switch "switch"
switch (${1:expression}){
	case $2:
		${3:statement(s)}
		break;
}
endsnippet 

snippet case "case"
case $1:
	${2:statement(s)}
	break;
endsnippet

snippet "(\w+)arr" "make an array" r
`!p
snip.rv = Vars[match.group(1)]` `!p snip.rv = match.group(1)`${1:arr} [${2:arrSize}] = {}; 
endsnippet

snippet struct "struct statement"
struct ${1:structure tag}{
	$2
}
endsnippet 

snippet enum "enums"
enum ${1:Name} {
	$2
}
endsnippet


snippet class "class"
class ${1:ClassName}{
	$2
};
endsnippet

snippet excep "try catch"
try {
	${1:protected code}
} catch ${2:exception name} {
	${3:catch block}
}
endsnippet 

snippet temp "template" i
template <${1:typename T}> ${2:name}
endsnippet 

snippet vec "vector" i
std::vector <${1:T}> $2${0:;}
endsnippet 

snippet ar "std::array" i
std::array<${1:int}, ${2:size}> ${3:name}${0:;}
endsnippet 

snippet pair "std::pair" i
std::pair<${1:int},${2:int}> (${3:val1},${4:val2})${0:;}
endsnippet 

snippet map "std::map" i
std::map<${1:int},${2:int}>${3:name}${0:;}
endsnippet 
